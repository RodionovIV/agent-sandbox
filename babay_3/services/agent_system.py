\nfrom langchain_gigachat.chat_models import GigaChat\nfrom langchain_gigachat.tools.giga_tool import giga_tool\nfrom langchain.schema import HumanMessage, SystemMessage, Document, AIMessage\nfrom langchain.vectorstores import FAISS\nfrom langchain.embeddings import SentenceTransformerEmbeddings\nfrom langchain.chains import RetrievalQA\nfrom langgraph.prebuilt import create_react_agent\nfrom langgraph.checkpoint.memory import MemorySaver\nfrom typing import TypedDict, Optional, Literal, List, Dict\nfrom typing_extensions import TypedDict\nfrom pydantic import BaseModel, Field\n\nclass AgentSystem:\n    def __init__(self):\n        # Создание LLM клиента\n        self.llm = GigaChat(\n            model="GigaChat-2-Max",\n            verify_ssl_certs=False,\n            profanity_check=False,\n            streaming=False,\n            max_tokens=8192,\n            temperature=0.3,\n            repetition_penalty=1.01,\n            timeout=60\n        )\n        # Создание агента\n        functions = [rag_search]\n        llm_with_functions = self.llm.bind_tools(functions)\n        self.agent_executor = create_react_agent(llm_with_functions, functions, checkpointer=MemorySaver())\n\n    def process(self, query: str) -> str:\n        # Запуск агента\n        config = {"configurable": {"thread_id": "thread_id4"}}\n        message = {"messages": [HumanMessage(content=query)]}\n        result = self.agent_executor.invoke(message, config=config)\n        return result\n